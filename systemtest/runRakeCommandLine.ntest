# -*-Perl-*-

# rake-RunRake.ntest -
#
# ECRake
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/../../EC-Rake/systemtest/rake-common.ntest";


$::grunRakeCreated = 0;
$::gProjectImported = 0;

#stores the result wheter the result of the procedure is success or error
my $outcome = "";




sub importProject() {
    assertOK($::N->import(
                     { file =>"$::gTestFileDir/rakeTests.xml",
               path  => "/projects/rakeTests",
               force => 1
             } ), "import runRakeCommandLine");
   
   assertOK($::N->getProcedure("rakeTests", "anotherNameForRakeFile"),"anotherNameForRakeFile procedure exists");
   assertOK($::N->getProcedure("rakeTests", "executeSpecifiedRakeTasks"),"executeSpecifiedRakeTasks procedure exists");
   assertOK($::N->getProcedure("rakeTests", "rakeCommandwithOptions"),"rakeCommandwithOptions procedure exists");
   assertOK($::N->getProcedure("rakeTests", "standardRakeCommand"),"standardRakeCommand procedure exists");
   assertOK($::N->getProcedure("rakeTests", "withAllRakeFields"),"withAllRakeFields procedure exists");
   
    $::gProjectImported = 1;
}

sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

   
}
 

#anotherNameForRakeFile 

 ntest "anotherNameForRakeFile", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("rakeTests", 
                 { procedureName => "anotherNameForRakeFile",
                 pollInterval  => '1',
                 timeout => 600,
                      actualParameter => [
                     
                     ]
          });
          
       
              # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 assertEq('completed',$status,"job $jobId complete");
         
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);
 
     # get the value of the nmakeCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='rakeCommandLine']/value");
 
 
     # get the value of the rakeWorkingDir property
     my $dir = $xpath->findvalue("//property[propertyName='rakeWorkingDir']/value");
 
     # make sure the $cmd and $dir are what was expected
     assertEq('rake -f "RakefileTest"', $cmd, "rake command line");
     assertEq('C:\rake example', $dir, "rake working directory");
  };


#executeSpecifiedRakeTasks
  
 ntest "executeSpecifiedRakeTasks", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("rakeTests", 
                 { procedureName => "executeSpecifiedRakeTasks",
                 pollInterval  => '1',
                 timeout => 600,
                      actualParameter => [
                     
                     ]
          });
          
       
              # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 assertEq('completed',$status,"job $jobId complete");
         
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);
 
     # get the value of the rakeCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='rakeCommandLine']/value");
 
 
     # get the value of the rakeWorkingDir property
     my $dir = $xpath->findvalue("//property[propertyName='rakeWorkingDir']/value");
 
     # make sure the $cmd and $dir are what was expected
     assertEq('rake task1 task2 -f "RakefileTest"', $cmd, "rake command line");
     assertEq('C:\rake example', $dir, "rake working directory");
  };

#rakeCommandwithOptions
  
 ntest "rakeCommandwithOptions", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("rakeTests", 
                 { procedureName => "rakeCommandwithOptions",
                 pollInterval  => '1',
                 timeout => 600,
                      actualParameter => [
                     
                     ]
          });
          
       
              # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 assertEq('completed',$status,"job $jobId complete");
         
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);
 
     # get the value of the rakeCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='rakeCommandLine']/value");
 
 
     # get the value of the rakeWorkingDir property
     my $dir = $xpath->findvalue("//property[propertyName='rakeWorkingDir']/value");
 
     # make sure the $cmd and $dir are what was expected
     assertEq('rake -f "RakefileTest" -v', $cmd, "rake command line");
     assertEq('C:\rake example', $dir, "rake working directory");
  };
  
#standardRakeCommand
 
 ntest "standardRakeCommand", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("rakeTests", 
                 { procedureName => "standardRakeCommand",
                 pollInterval  => '1',
                 timeout => 600,
                      actualParameter => [
                     
                     ]
          });
          
       
              # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 assertEq('completed',$status,"job $jobId complete");
         
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);
 
     # get the value of the rakeCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='rakeCommandLine']/value");
 
 
     # get the value of the rakeWorkingDir property
     my $dir = $xpath->findvalue("//property[propertyName='rakeWorkingDir']/value");
 
     # make sure the $cmd and $dir are what was expected
     assertEq('rake -f "RakefileTest"', $cmd, "rake command line");
     assertEq('C:\rake example', $dir, "rake working directory");
  };

#withAllRakeFields
 
 ntest "withAllRakeFields", {}, sub {
      doSetup();
      # run test job
     
         my $xpath = $::N->runProcedure("rakeTests", 
                 { procedureName => "withAllRakeFields",
                 pollInterval  => '1',
                 timeout => 600,
                      actualParameter => [
                     
                     ]
          });
          
       
              # make sure it finished
             my $jobId = 0;
             my $status = "";
             
             assertOK($xpath, "runProcedure with errors");
             if ($xpath) {
                 $jobId  = $xpath->findvalue("//jobId");
                 $status = $xpath->findvalue("//status");
                 $outcome = $xpath->findvalue("//outcome");
         
                 assertTrue($jobId && $jobId ne "",'valid job id');
                 assertEq('completed',$status,"job $jobId complete");
         
                 #abort if job did not finish
                 if ($status ne "completed") {
                     assertOK($::N->abortJob($jobId, {force => 1}));
                 }
             }
 
     # get the job details
     $xpath = $::N->getJobDetails($jobId);
 
     # get the value of the rakeCommandLine property
     my $cmd = $xpath->findvalue("//property[propertyName='rakeCommandLine']/value");
 
 
     # get the value of the rakeWorkingDir property
     my $dir = $xpath->findvalue("//property[propertyName='rakeWorkingDir']/value");
 
     # make sure the $cmd and $dir are what was expected
     assertEq('rake task1 task2 -f "RakefileTest" --verbose --trace', $cmd, "rake command line");
     assertEq('C:\rake example', $dir, "rake working directory");
  };
